/*----- PROTECTED REGION ID(Simulator.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Simulator.cpp
//
// description : C++ source for the Simulator and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Simulator are implemented in this file.
//
// project :     simulator generator.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <Simulator.h>
#include <SimulatorClass.h>
#include "simulator_c/simulator.h"

/*----- PROTECTED REGION END -----*/	//	Simulator.cpp

/**
 *  Simulator class description:
 *    Generates waves to simulator tango. Can be used for calibration and regression testing.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name      |  Method name
//================================================================
//  State             |  Inherited (no method)
//  Status            |  Inherited (no method)
//  UpdateAttributes  |  update_attributes
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Amplitude  |  Tango::DevFloat	Scalar
//  smsstring  |  Tango::DevString	Scalar
//================================================================

namespace Simulator_ns
{
/*----- PROTECTED REGION ID(Simulator::namespace_starting) ENABLED START -----*/

	//	static initializations

	/*----- PROTECTED REGION END -----*/	//	Simulator::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Simulator::Simulator()
 *	Description : Constructors for a Tango device
 *                implementing the classSimulator
 */
//--------------------------------------------------------
Simulator::Simulator(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Simulator::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	Simulator::constructor_1
}
//--------------------------------------------------------
Simulator::Simulator(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Simulator::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	Simulator::constructor_2
}
//--------------------------------------------------------
Simulator::Simulator(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Simulator::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	Simulator::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Simulator::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Simulator::delete_device()
{
	DEBUG_STREAM << "Simulator::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Simulator::delete_device) ENABLED START -----*/

	//	Delete device allocated objects

                if (attr_Amplitude_read) {
                        delete[] attr_Amplitude_read;
                        attr_Amplitude_read = 0;
                }

	/*----- PROTECTED REGION END -----*/	//	Simulator::delete_device
	delete[] attr_smsstring_read;
}

//--------------------------------------------------------
/**
 *	Method      : Simulator::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Simulator::init_device()
{
	DEBUG_STREAM << "Simulator::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Simulator::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	Simulator::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_smsstring_read = new Tango::DevString[1];
	/*----- PROTECTED REGION ID(Simulator::init_device) ENABLED START -----*/

	//	Initialize device
	// Initialise variables to default values
	attr_Amplitude_read = new Tango::DevFloat;
                *attr_Amplitude_read = (float)0;
	get_device_property();
	set_state(Tango::ON);

	/*----- PROTECTED REGION END -----*/	//	Simulator::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Simulator::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Simulator::get_device_property()
{
	/*----- PROTECTED REGION ID(Simulator::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members
	

	/*----- PROTECTED REGION END -----*/	//	Simulator::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("DeviceNr"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on SimulatorClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		SimulatorClass	*ds_class =
			(static_cast<SimulatorClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize DeviceNr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceNr;
		else {
			//	Try to initialize DeviceNr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceNr;
		}
		//	And try to extract DeviceNr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceNr;

	}

	/*----- PROTECTED REGION ID(Simulator::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	Simulator::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : Simulator::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Simulator::always_executed_hook()
{
	DEBUG_STREAM << "Simulator::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Simulator::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests
	

	/*----- PROTECTED REGION END -----*/	//	Simulator::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Simulator::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Simulator::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Simulator::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Simulator::read_attr_hardware) ENABLED START -----*/
        Tango::DevString argout = update_attributes();
        free(argout);
	/*----- PROTECTED REGION END -----*/	//	Simulator::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Amplitude related method
 *	Description: vertical axis (range 0..Height)
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Simulator::read_Amplitude(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Simulator::read_Amplitude(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Simulator::read_Amplitude) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Amplitude_read);

	/*----- PROTECTED REGION END -----*/	//	Simulator::read_Amplitude
}
//--------------------------------------------------------
/**
 *	Read attribute smsstring related method
 *	Description: sms string for ego
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Simulator::read_smsstring(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Simulator::read_smsstring(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Simulator::read_smsstring) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_smsstring_read);
	
	/*----- PROTECTED REGION END -----*/	//	Simulator::read_smsstring
}

//--------------------------------------------------------
/**
 *	Method      : Simulator::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Simulator::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Simulator::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Simulator::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command UpdateAttributes related method
 *	Description: Updates attributes by command
 *
 *	@returns A string with all values returned type, height, x ,y
 */
//--------------------------------------------------------
Tango::DevString Simulator::update_attributes()
{
	Tango::DevString argout;
	DEBUG_STREAM << "Simulator::UpdateAttributes()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Simulator::update_attributes) ENABLED START -----*/
        DEBUG_STREAM << "Simulator::update_attributes(): entering... !" << endl;
	char message[256]; // message holder

	double Amplitude=0.0;
	if(GetAmplitude(deviceNr,&Amplitude)==-1){
		set_state(Tango::FAULT);
		sprintf(message,"GetAmplitude returns error for deviceNr %d",deviceNr);
		set_status(message);
//		ERROR_STREAM << "ERROR Failed to connect to deviceNr" + deviceNr << endl;
	}else{
		set_state(Tango::ON);
		sprintf(message,"GetAmplitude no error for deviceNr %d",deviceNr);
		set_status(message);
	}
	*attr_Amplitude_read=(float)Amplitude;

	DEBUG_STREAM << "Simulator::update_attributes2():... !" << "attr_Amplitude_read" << *attr_Amplitude_read << endl;

	sprintf(message,"%4f",*attr_Amplitude_read);

	char message2[256]; // message holder
	sprintf(message2,"State %d Amplitude %4f",get_state(),*attr_Amplitude_read);
//	string mysms="State  Amplitude "+*attr_Amplitude_read;
	*attr_smsstring_read  = CORBA::string_dup(message2);
	argout  = CORBA::string_dup(message);
	/*----- PROTECTED REGION END -----*/	//	Simulator::update_attributes
	return argout;
}
//--------------------------------------------------------
/**
 *	Method      : Simulator::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Simulator::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Simulator::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	Simulator::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Simulator::namespace_ending) ENABLED START -----*/

	//	Additional Methods
//=============================================================================
// Simulator::gen_data
//=============================================================================
//void Simulator::gen_data ()
//{
//	update_attributes();
//}


	/*----- PROTECTED REGION END -----*/	//	Simulator::namespace_ending
} //	namespace
