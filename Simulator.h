/*----- PROTECTED REGION ID(Simulator.h) ENABLED START -----*/
//=============================================================================
//
// file :        Simulator.h
//
// description : Include for the Simulator class.
//
// project :     simulator generator.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef BENCHMARK_H
#define BENCHMARK_H


#include <tango.h>





/*----- PROTECTED REGION END -----*/	//	Simulator.h

/**
 *  Simulator class description:
 *    Generates waves to simulator tango. Can be used for calibration and regression testing.
 */

namespace Simulator_ns
{
/*----- PROTECTED REGION ID(Simulator::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	Simulator::Additional Class Declarations

class Simulator : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Simulator::Data Members) ENABLED START -----*/

	//		Add your own data members
public:



	/*----- PROTECTED REGION END -----*/	//	Simulator::Data Members

//	Device property data members
public:
	//	DeviceNr:	This is the device_nr you wish to read. 1 ramp,2 rampx2, 3 error or 4 timeout
	Tango::DevLong	deviceNr;

//	Attribute data members
public:
	Tango::DevFloat	*attr_Amplitude_read;
	Tango::DevString	*attr_smsstring_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Simulator(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Simulator(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Simulator(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Simulator() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Simulator::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Amplitude related methods
 *	Description: vertical axis (range 0..Height)
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Amplitude(Tango::Attribute &attr);
	virtual bool is_Amplitude_allowed(Tango::AttReqType type);
/**
 *	Attribute smsstring related methods
 *	Description: sms string for ego
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_smsstring(Tango::Attribute &attr);
	virtual bool is_smsstring_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Simulator::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command UpdateAttributes related method
	 *	Description: Updates attributes by command
	 *
	 *	@returns A string with all values returned type, height, x ,y
	 */
	virtual Tango::DevString update_attributes();
	virtual bool is_UpdateAttributes_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Simulator::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Simulator::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes
/**
	  *      Generates attribute values - added by mmohan
	  */
	 void gen_data (void);


protected :

	/*----- PROTECTED REGION END -----*/	//	Simulator::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Simulator::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	Simulator::Additional Classes Definitions

}	//	End of namespace

#endif   //	Simulator_H
